(()=>{"use strict";var e=document.getElementById("canvas"),r=e.getContext("webgl"),a=function(e,r,a){var t=l(e,e.VERTEX_SHADER,"\n    attribute vec4 a_Position;\n    void main() {\n        gl_Position = a_Position;\n    }\n"),n=l(e,e.FRAGMENT_SHADER,"\n    void main() {\n        gl_FragColor = vec4(1.0,0.0,0.0,1.0);;\n    }\n");if(!t||!n)return null;var o=e.createProgram();if(!o)return null;if(e.attachShader(o,t),e.attachShader(o,n),e.linkProgram(o),!e.getProgramParameter(o,e.LINK_STATUS)){var i=e.getProgramInfoLog(o);return console.log("Failed to link program: "+i),e.deleteProgram(o),e.deleteShader(n),e.deleteShader(t),null}return o}(r);a||console.log("Failed to create program"),r.useProgram(a);var t=r.getAttribLocation(a,"a_Position");r.enableVertexAttribArray(t);var n=r.createBuffer();r.bindBuffer(r.ARRAY_BUFFER,n);var o=r.FLOAT;function l(e,r,a){var t=e.createShader(r);if(null===t)return console.log("unable to create shader"),null;if(e.shaderSource(t,a),e.compileShader(t),!e.getShaderParameter(t,e.COMPILE_STATUS)){var n=e.getShaderInfoLog(t);return console.log("Failed to compile shader: "+n),e.deleteShader(t),null}return t}r.vertexAttribPointer(t,2,o,!1,0,0),r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT);var i=[];e.addEventListener("click",(function(a){if(0===a.button){var t=function(r,a){var t=e.getBoundingClientRect(),n=e.width,o=e.height;return[(r-t.left)/n*2-1,(a-t.top)/o*-2+1]}(a.clientX,a.clientY),n=t[0],o=t[1];i.push([n,o]),r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT),i.forEach((function(e){!function(e,a,t){void 0===t&&(t=.01),console.log(e,a);for(var n=[e,a],o=0;o<=100;o++){var l=2*Math.PI/100*o,i=e+t*Math.cos(l),c=a+t*Math.sin(l);n.push(i,c)}var u=new Float32Array(n);r.bufferData(r.ARRAY_BUFFER,u,r.STATIC_DRAW);var d=r.TRIANGLE_FAN,g=u.length/2;r.drawArrays(d,0,g)}(e[0],e[1])}))}})),e.addEventListener("contextmenu",(function(e){e.preventDefault(),r.clearColor(0,0,0,1),r.clear(r.COLOR_BUFFER_BIT),function(e){console.log(e);var a=[];e.forEach((function(e){var r=e[0],t=e[1];a.push(r,t)}));var t=new Float32Array(a);r.bufferData(r.ARRAY_BUFFER,t,r.STATIC_DRAW);var n=r.LINE_LOOP,o=t.length/2;r.drawArrays(n,0,o)}(i)}))})();